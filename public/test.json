[{"title":"Test POST /api/books with title","context":"Functional Tests -> Routing tests -> POST /api/books with title => create book object/expect book object","state":"passed","assertions":[{"method":"equal","args":["res.status","200"]},{"method":"property","args":["res.body","\"title\""]},{"method":"equal","args":["res.body.title","\"POST with title\""]},{"method":"property","args":["res.body","\"_id\""]}]},{"title":"Test POST /api/books with no title given","context":"Functional Tests -> Routing tests -> POST /api/books with title => create book object/expect book object","state":"passed","assertions":[{"method":"equal","args":["res.status","200"]},{"method":"isString","args":["res.text"]},{"method":"equal","args":["res.text","\"missing required field title\""]}]},{"title":"Test GET /api/books","context":"Functional Tests -> Routing tests -> GET /api/books => array of books","state":"passed","assertions":[{"method":"equal","args":["res.status","200"]},{"method":"isArray","args":["res.body","\"response should be an array\""]},{"method":"property","args":["res.body[0]","\"commentcount\"","\"Books in array should contain commentcount\""]},{"method":"property","args":["res.body[0]","\"title\"","\"Books in array should contain title\""]},{"method":"property","args":["res.body[0]","\"_id\"","\"Books in array should contain _id\""]}]},{"title":"Test GET /api/books/[id] with id not in db","context":"Functional Tests -> Routing tests -> GET /api/books/[id] => book object with [id]","state":"passed","assertions":[{"method":"equal","args":["res.status","200"]},{"method":"isString","args":["res.text"]},{"method":"equal","args":["res.text","\"no book exists\""]}]},{"title":"Test GET /api/books/[id] with valid id in db","context":"Functional Tests -> Routing tests -> GET /api/books/[id] => book object with [id]","state":"passed","assertions":[{"method":"equal","args":["res.status","200"]},{"method":"property","args":["res.body","\"title\""]},{"method":"equal","args":["res.body.title","\"POST with title\""]},{"method":"property","args":["res.body","\"_id\""]},{"method":"equal","args":["res.body._id","id1"]},{"method":"property","args":["res.body","\"commentcount\""]},{"method":"isNumber","args":["res.body.commentcount"]},{"method":"property","args":["res.body","\"comments\""]},{"method":"isArray","args":["res.body.comments"]}]},{"title":"Test POST /api/books/[id] with comment","context":"Functional Tests -> Routing tests -> POST /api/books/[id] => add comment/expect book object with id","state":"passed","assertions":[{"method":"equal","args":["res.status","200"]},{"method":"property","args":["res.body","'title'"]},{"method":"equal","args":["res.body.title","\"POST with title\""]},{"method":"property","args":["res.body","\"_id\""]},{"method":"equal","args":["res.body._id","id1"]},{"method":"property","args":["res.body","\"comments\""]},{"method":"isArray","args":["res.body.comments"]},{"method":"isTrue","args":["res.body.comments.includes(\"POST with comment\")"]},{"method":"property","args":["res.body","\"commentcount\""]},{"method":"equal","args":["res.body.commentcount","res.body.comments.length"]}]},{"title":"Test POST /api/books/[id] without comment field","context":"Functional Tests -> Routing tests -> POST /api/books/[id] => add comment/expect book object with id","state":"passed","assertions":[{"method":"equal","args":["res.status","200"]},{"method":"isString","args":["res.text"]},{"method":"equal","args":["res.text","\"missing required field comment\""]}]},{"title":"Test POST /api/books/[id] with comment, id not in db","context":"Functional Tests -> Routing tests -> POST /api/books/[id] => add comment/expect book object with id","state":"passed","assertions":[{"method":"equal","args":["res.status","200"]},{"method":"isString","args":["res.text"]},{"method":"equal","args":["res.text","\"no book exists\""]}]},{"title":"Test DELETE /api/books/[id] with valid id in db","context":"Functional Tests -> Routing tests -> DELETE /api/books/[id] => delete book object id","state":"passed","assertions":[{"method":"equal","args":["res.status","200"]},{"method":"isString","args":["res.text"]},{"method":"equal","args":["res.text","\"delete successful\""]}]},{"title":"Test DELETE /api/books/[id] with  id not in db","context":"Functional Tests -> Routing tests -> DELETE /api/books/[id] => delete book object id","state":"passed","assertions":[{"method":"equal","args":["res.status","200"]},{"method":"isString","args":["res.text"]},{"method":"equal","args":["res.text","\"no book exists\""]}]}]
